name: Build And Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    # push 이벤트가 발생했을 때만 실행
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Create new builder
#        run: docker buildx create --use --name mybuilder --driver docker-container

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:${{ github.event.pull_request.number }}, ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:latest
#          platforms: linux/amd64,linux/arm64

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo sh -c 'truncate -s 0 /var/lib/docker/containers/*/*-json.log'
            cd ~/${{ secrets.REPOSITORY_NAME }}
            sudo echo "${{ secrets.DOT_ENT }}" > .env
            sudo docker rm -f ${{ secrets.REPOSITORY_NAME }} || true
            sudo docker rmi -f ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:latest || true
            sudo docker run -d --name ${{ secrets.REPOSITORY_NAME }} -p 8001:8000 --env-file .env ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:latest

            sudo docker exec -it ${{ secrets.REPOSITORY_NAME }} python3 manage.py migrate